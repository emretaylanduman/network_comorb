import pandas as pd
from pandas import ExcelWriter
from pandas import ExcelFile

import math
import pylab as pl
from pylab import *
import numpy as np
import scikitplot as skplt
import matplotlib.pyplot as plt
from matplotlib.colors import LogNorm
from sklearn.metrics import roc_curve, auc
from scipy import interpolate
from sklearn import metrics

mult_chec = pd.read_excel('multi_chec.xlsx')
mult_rev = pd.read_excel('multi_reversed.xlsx')
df_clinical = pd.read_excel('clinical_disease.xlsx')
cdc_dat = pd.read_excel('cdc_data_scored.xlsx')
fin_res = pd.read_excel('similarity_covid_cancerless_tf_2x.xlsx')

  
  def collect_scores2(inp,dis_list,dis_df,cor):
  alt_dis_1 = []
  alt_dis_2 = []
  alt_sc = []
  for i in dis_list:
    ind = [index for index, value in enumerate(inp.disease1_name) if value == i]
    for ina in ind:
      pro = inp.disease2_name[ina]
      if pro in dis_list:
        alt_dis_1.append(i)
        alt_dis_2.append(pro)
        alt_sc.append(inp[cor][ina])
  df = pd.DataFrame(list(zip(alt_dis_1, alt_dis_2,alt_sc)), columns =['Disease-1', 'Disease-2', 'Score'])
  df['y'] = ''
  list1_disease = list(df['Disease-1'])
  list2_disease = list(df['Disease-2'])
  for i in range(len(list1_disease)):
    less_a1 = dis_df['Disease-2'][dis_df['Disease-1'].str.contains(list1_disease[i])]
    less_b1 = dis_df['Disease-1'][dis_df['Disease-2'].str.contains(list1_disease[i])]

    less_x = list(less_b1) + list(less_a1)

    if list2_disease[i] in less_x:
      df['y'][i]='1'
    else:
      df['y'][i]='0'
  df['y'] = pd.to_numeric(df['y'])
  #file_name = 'comp_' + str(name) + '.xlsx'
  #df.to_excel(file_name)
  return(df)

name = 'Cancerless_TF_fixed_Spearman'
fin_res_pvt = fin_res.pivot_table(index='disease1_name', columns='disease2_name', values='similarity',dropna = False)

res_pearson = fin_res_pvt.corr(method="pearson")
res_spearman = fin_res_pvt.corr(method="spearman")
res_kendall = fin_res_pvt.corr(method="kendall")

corrections = ['Score-Pearson','Score-Spearman','Score-Kendall']
thresholds = [0.85,0.9,0.95]
rr_thresholds = [1.2,1.5,2,10,20]

disease1 = []
disease2 = []
similarity = []
pears = []
spear = []
kendall = []
for i in range(len(fin_res_pvt.columns)):
  col = fin_res_pvt.columns[i]
  for k in range(len(fin_res_pvt[col].index)):
    indx = fin_res_pvt[col].index[k]
    disease1.append(col)
    disease2.append(indx)
    similarity.append(fin_res_pvt[col][indx])
    pears.append(res_pearson[col][indx])
    spear.append(res_spearman[col][indx])
    kendall.append(res_kendall[col][indx])

daf = pd.DataFrame.from_dict({'disease1_name':disease1,'disease2_name':disease2,'similarity':similarity,'Score-Pearson':pears,'Score-Spearman':spear,'Score-Kendall':kendall})

for rr_thr in rr_thresholds:
  ovr_rev = mult_rev[['description','description.1']][mult_rev.RR>rr_thr]
  ovr_rev = ovr_rev.rename(columns={'description': 'Disease-1', 'description.1': 'Disease-2'})
  total_disease = list(set(df_clinical['Disease-1'])) + list(set(df_clinical['Disease-2']))
  total_disease2 = list(set(ovr_rev['Disease-1'])) + list(set(ovr_rev['Disease-2'])) + total_disease
  for corr in corrections:
    for x in thresholds:
      dass = daf[(daf[corr]>x) & (daf['similarity']>0.95)]
      dass = dass.drop_duplicates(subset='similarity', keep="last")
      dass = dass.drop(dass.index[dass['similarity'] == 1])
      dast = daf[(daf['Score-Spearman']>x) & (daf['similarity']<0.85)]
      fin_dat = pd.concat([dass,dast])
      fin_dat = fin_dat[['disease1_name','disease2_name','similarity']]
      fin_dat = fin_dat.reset_index(drop=True)
      fin_dat_coll = collect_scores2(fin_dat,total_disease2,df_clinical,'reproduced')

      y_true_cancer_full_score = fin_dat_coll['y']
      y_probas_cancer_full_score = fin_dat_coll['Score']
      fpr_full_score, tpr_full_score, thresholds_full_score = roc_curve(y_true_cancer_full_score, y_probas_cancer_full_score)
      rep_auc = auc(fpr_full_score,tpr_full_score)

      nam_label = corr + ' ' + str(x) + '-' + name + '-' + 'Extended Data ' + 'RR: ' + str(rr_thr)

      plt.plot(fpr_full_score, tpr_full_score, marker='.', label='(AUC = %0.2f)' % rep_auc)
      #plt.plot(fpr_cancer_tf, tpr_cancer_tf, marker='.', label='Cancer-TF')
      #plt.plot(fpr_cless, tpr_cless, marker='.', label='Cancerless')
      plt.title(nam_label)
      nam_fil = nam_label+'.jpg'
      # axis labels
      plt.xlabel('False Positive Rate')
      plt.ylabel('True Positive Rate')
      plt.plot([0, 1], [0, 1], color='black', linestyle='--')
      # show the legend
      plt.legend()
      # show the plot
      #plt.savefig(nam_fil, dpi=1200)
      plt.show()

###FINALLY!!!!!!

df_violin= df_violin.drop(df_violin.index[df_violin['similarity'] == 1])
df_violin = df_violin.reset_index(drop=True)

mult_rev = pd.read_excel('multi_reversed.xlsx')
mult_rev = mult_rev.loc[pd.DataFrame(np.sort(mult_rev[['description','description.1']],1),index=mult_rev.index).drop_duplicates(keep='first').index]
mult_rev = mult_rev.reset_index(drop=True)

#total_disease_sc = set(list(set(df_violin['disease1_name'])) + list(set(mult_rev['disease2_name'])))
total_rr = list(set(list(mult_rev['description.1']) + list(mult_rev['description'])))

alt_dis_1 = []
alt_dis_2 = []
alt_sc = []
alt_rr = []
alt_pe = []
alt_sp = []
alt_ke = []

for i in total_rr:
  if i in list(mult_rev['description']):
    inda = [index for index, value in enumerate(mult_rev['description']) if value == i]
    daf = pd.DataFrame.from_dict({'description':mult_rev['description'][inda],'description.1':mult_rev['description.1'][inda],'RR':mult_rev['RR'][inda]})
    daf = daf.reset_index(drop=True)
  elif i in list(mult_rev['description.1']):
    inda = [index for index, value in enumerate(mult_rev['description.1']) if value == i]
    daf = pd.DataFrame.from_dict({'description':mult_rev['description.1'][inda],'description.1':mult_rev['description'][inda],'RR':mult_rev['RR'][inda]})
    daf = daf.reset_index(drop=True)
  else:
    continue
  for ix in list(daf['description']):
    if ix in set(list(df_violin['disease1_name'])):
      alt_dis_1.append(ix)
      ind = [index for index, value in enumerate(df_violin['disease1_name']) if value == ix]
      df_sc = pd.DataFrame.from_dict({'disease1_name':df_violin['disease1_name'][ind],
                                      'disease2_name':df_violin['disease2_name'][ind],'similarity':df_violin['similarity'][ind],
                                      'Pearson':df_violin['Score-Pearson'][ind],'Spearman':df_violin['Score-Spearman'][ind],
                                      'Kendall':df_violin['Score-Kendall'][ind]})
      df_sc = df_sc.reset_index(drop=True)

      for ixy in list(df_sc['disease2_name']):
        if ixy in list(daf['description.1']):
          alt_dis_2.append(ixy)
          indxs = [index for index, value in enumerate(daf['description.1']) if value == ixy]
          indxes = [index for index, value in enumerate(df_sc['disease2_name']) if value == ixy]
          alt_rr.append(daf['RR'][indxs[0]])
          alt_sc.append(df_sc['similarity'][indxes[0]])
          alt_pe.append(df_sc['Pearson'][indxes[0]])
          alt_sp.append(df_sc['Spearman'][indxes[0]])
          alt_ke.append(df_sc['Kendall'][indxes[0]])

df = pd.DataFrame(list(zip(alt_dis_1, alt_dis_2, alt_sc, alt_rr, alt_pe, alt_sp, alt_ke)), columns =['Disease-1', 'Disease-2','Score','RR','Pearson','Spearman','Kendall'])
